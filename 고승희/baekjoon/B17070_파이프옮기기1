package algo0313;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/** 	13992kb	228ms
 * N x N 격자판 (3~16)
 * (r,c) 칸 (행, 열) 행, 열 번호는 1부터 시작
 * 0: 빈칸, 1:벽 (벽을 긁으면 안된다)
 * 가로 : 가로, 대각선
 * 세로 : 세로, 대각선
 * 대각선 : 가로, 세로, 대각선 이동 가능
 * 처음 파이프의 위치 (1,1), (1,2) 가로
 * 
 * [목표] 파이프의 한쪽 끝을 (N,N)으로 이동시키는 방법의 개수
 * 이동시킬 수 없을 때는 0을 출력, 방법의 수<=백만
 * 
 * [문제 해결 방법]
 * 1. 현재 방향을 저장 -> 
 * 2. 현재 방향에서 이동가능한 위치 찾기 (다음위치가 비어있는지, 범위 내인지)
 * 3. 한쪽끝의 위치와 현재 방향을 이용해서 다음 위치 찾기
 * 4. 만약 현재 위치가 N-1, N-1이면 cnt+1
 * 6. dfs 이용하기
 * visited 배열을 안사용한다. 때와장소를 가리자??
 * */
public class 파이프옮기기1 {
	static int N;
	static int[][] map;
//	static boolean[][][] visited; //visited배열 사용할 필요 없음
	static int cnt;
	static int dir; //현재 방향 0:가로, 1:세로, 2:대각선
	static int[][] delta = {{0,1}, {1,0}, {1,1}};
	//가로 세로 대각선 이동 (끝 위치)
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		N = Integer.parseInt(br.readLine());
		map = new int[N][N];
		for (int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j=0; j<N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}			
		}
		
		dfs(0,1);
		System.out.println(cnt);
	}
	
	static void dfs(int r, int c) {
		if (r == N-1 && c == N-1) {
			cnt++;
			return;
		}
		if (dir == 0) { //가로 방향
			int nr = r + delta[0][0];
			int nc = c + delta[0][1];
			if (isInRange(nr,nc) && map[nr][nc] == 0  ) {

				dfs(nr,nc);
			}
			nr = r + delta[2][0];
			nc = c + delta[2][1];
			dir = 2;
			if (isInRange(nr,nc)  &&
			map[r+1][c] == 0 && map[r][c+1] == 0 && map[nr][nc] == 0){
				

				dfs(nr,nc);
			}
		} else if (dir == 1) { //세로 방향
			int nr = r + delta[1][0];
			int nc = c + delta[1][1];
			if (isInRange(nr,nc) && map[nr][nc] == 0) {
			
				dfs(nr,nc);
			}
			nr = r + delta[2][0];
			nc = c + delta[2][1];
			dir = 2;
			if (isInRange(nr,nc)  &&
			map[r+1][c] == 0 && map[r][c+1] == 0 && map[nr][nc] == 0){
			
				dfs(nr,nc);
			}
		} else { //대각선
			int nr = r + delta[0][0];
			int nc = c + delta[0][1];
			dir = 0;
			if (isInRange(nr,nc) && map[nr][nc] == 0  ) {
			
				dfs(nr,nc);
			}
			nr = r + delta[1][0];
			nc = c + delta[1][1];
			dir = 1;
			if (isInRange(nr,nc) && map[nr][nc] == 0) {
			
				dfs(nr,nc);
			}
			nr = r + delta[2][0];
			nc = c + delta[2][1];
			dir = 2;
			if (isInRange(nr,nc) &&
					map[r+1][c] == 0 && map[r][c+1] == 0 && map[nr][nc] == 0){
						
						dfs(nr,nc);
					}
			
		}
	}

	static boolean isInRange(int r, int c) {
		return (r >= 0 && r < N && c >= 0 && c < N);
	}
}
